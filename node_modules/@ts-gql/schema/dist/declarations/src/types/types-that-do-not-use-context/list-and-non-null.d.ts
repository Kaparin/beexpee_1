import { GraphQLList, GraphQLNonNull, GraphQLNullableType } from "graphql/type/definition";
import { ObjectType, UnionType } from "../output";
import { EnumType as EnumType, InputObjectType as InputObjectType, ScalarType } from ".";
export declare type ListType<Of extends Types> = {
    kind: "list";
    of: Of;
    __context: Of["__context"];
    graphQLType: GraphQLList<Of["graphQLType"]>;
};
export declare function list<Of extends Types>(of: Of): ListType<Of>;
export declare type NonNullType<Of extends TypesExcludingNonNull> = {
    kind: "non-null";
    of: Of;
    __context: Of["__context"];
    graphQLType: GraphQLNonNull<Of["graphQLType"]>;
};
export declare function nonNull<Of extends TypesExcludingNonNull>(of: Of): NonNullType<Of>;
export declare type TypesExcludingNonNull = ScalarType<any> | ListType<any> | InputObjectType<any> | ObjectType<any, string, any> | UnionType<ObjectType<any, string, any>> | EnumType<any>;
export declare type Types = TypesExcludingNonNull | {
    kind: "non-null";
    of: TypesExcludingNonNull;
    graphQLType: GraphQLNullableType;
    __context: unknown;
};
