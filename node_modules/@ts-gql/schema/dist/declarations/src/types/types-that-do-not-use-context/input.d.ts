import { GraphQLInputObjectType, GraphQLList, GraphQLNonNull } from "graphql/type/definition";
import { EnumType } from "./enum";
import { ScalarType } from "./scalars";
declare type InputListType<Of extends InputType> = {
    kind: "list";
    of: Of;
    graphQLType: GraphQLList<any>;
    __context: any;
};
declare type InputNonNullType<Of extends InputTypeExcludingNonNull> = {
    kind: "non-null";
    of: Of;
    graphQLType: GraphQLNonNull<any>;
    __context: any;
};
export declare type InputTypeExcludingNonNull = ScalarType<any> | InputObjectType<any> | InputListType<any> | EnumType<any>;
export declare type InputType = InputTypeExcludingNonNull | InputNonNullType<any>;
declare type InferValueFromInputTypeWithoutAddingNull<Type extends InputType> = Type extends ScalarType<infer Value> ? Value : Type extends EnumType<infer Values> ? Values[keyof Values]["value"] : Type extends InputListType<infer Value> ? InferValueFromInputType<Value>[] : Type extends InputObjectType<infer Fields> ? {
    readonly [Key in keyof Fields]: InferValueFromArg<Fields[Key]>;
} : never;
export declare type InferValueFromArgs<Args extends Record<string, Arg<any, any>>> = {
    readonly [Key in keyof Args]: InferValueFromArg<Args[Key]>;
};
export declare type InferValueFromArg<TArg extends Arg<any, any>> = InferValueFromInputType<TArg["type"]> | ("non-null" extends TArg["type"]["kind"] ? never : undefined extends TArg["defaultValue"] ? undefined : never);
export declare type InferValueFromInputType<Type extends InputType> = Type extends InputNonNullType<infer Value> ? InferValueFromInputTypeWithoutAddingNull<Value> : InferValueFromInputTypeWithoutAddingNull<Type> | null;
export declare type InputObjectType<Fields extends {
    [Key in keyof any]: Arg<InputType, InferValueFromInputType<InputType>>;
}> = {
    kind: "input";
    __fields: Fields;
    __context: unknown;
    graphQLType: GraphQLInputObjectType;
};
export declare type Arg<Type extends InputType, DefaultValue extends InferValueFromInputType<Type> | undefined = undefined> = {
    type: Type;
    description?: string;
    defaultValue?: DefaultValue;
} & (undefined extends DefaultValue ? {} : {
    defaultValue: DefaultValue;
});
export declare function arg<Type extends InputType, DefaultValue extends InferValueFromInputType<Type> | undefined>(arg: Arg<Type, DefaultValue>): Arg<Type, DefaultValue>;
export declare function inputObject<Fields extends {
    [Key in keyof any]: Arg<InputType, InferValueFromInputType<InputType>>;
}>(config: {
    name: string;
    description?: string;
    fields: (() => Fields) | Fields;
}): InputObjectType<Fields>;
export {};
