import { GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLUnionType } from 'graphql/type/definition';
import { GraphQLID, GraphQLString, GraphQLFloat, GraphQLInt, GraphQLBoolean } from 'graphql/type/scalars';

function enumValues(values) {
  return Object.fromEntries(values.map(value => [value, {
    value
  }]));
}

function enumType(config) {
  const graphQLType = new GraphQLEnumType({
    name: config.name,
    description: config.description,
    values: config.values
  });
  return {
    kind: "enum",
    values: config.values,
    graphQLType,
    __context: undefined
  };
}

function arg(arg) {
  return arg;
}
function inputObject(config) {
  const fields = config.fields;
  const graphQLType = new GraphQLInputObjectType({
    name: config.name,
    description: config.description,
    fields: () => {
      return Object.fromEntries(Object.entries(typeof fields === "function" ? fields() : fields).map(([key, value]) => [key, {
        description: value.description,
        type: value.type.graphQLType,
        defaultValue: value.defaultValue
      }]));
    }
  });
  return {
    kind: "input",
    __fields: undefined,
    __context: undefined,
    graphQLType
  };
}

function scalar(scalar) {
  return {
    kind: "scalar",
    __type: undefined,
    __context: undefined,
    graphQLType: scalar
  };
}
const ID = scalar(GraphQLID);
const String = scalar(GraphQLString);
const Float = scalar(GraphQLFloat);
const Int = scalar(GraphQLInt);
const Boolean = scalar(GraphQLBoolean);

function list(of) {
  return {
    kind: "list",
    of,
    __context: of["__context"],
    graphQLType: new GraphQLList(of.graphQLType)
  };
}
function nonNull(of) {
  return {
    kind: "non-null",
    of,
    __context: of["__context"],
    graphQLType: new GraphQLNonNull(of.graphQLType)
  };
}

var typesThatDoNotUseContext = /*#__PURE__*/Object.freeze({
  __proto__: null,
  enumValues: enumValues,
  'enum': enumType,
  arg: arg,
  inputObject: inputObject,
  scalar: scalar,
  ID: ID,
  String: String,
  Float: Float,
  Int: Int,
  Boolean: Boolean,
  list: list,
  nonNull: nonNull
});

const field = bindFieldToContext();

function bindFieldToContext() {
  return function field(field) {
    return field;
  };
}

const object = bindObjectTypeToContext();

function bindObjectTypeToContext() {
  return function object() {
    return function objectInner(config) {
      return {
        kind: "object",
        name: config.name,
        graphQLType: new GraphQLObjectType({
          name: config.name,
          description: config.description,
          fields: () => {
            const fields = typeof config.fields === "function" ? config.fields() : config.fields;
            return buildFields(fields);
          }
        }),
        __rootVal: undefined,
        __context: undefined
      };
    };
  };
}

function buildFields(fields) {
  return Object.fromEntries(Object.entries(fields).map(([key, val]) => [key, {
    type: val.type.graphQLType,
    resolve: val.resolve,
    deprecationReason: val.deprecationReason,
    description: val.description,
    args: Object.fromEntries(Object.entries(val.args || {}).map(([key, val]) => [key, {
      type: val.type.graphQLType,
      description: val.description,
      defaultValue: val.defaultValue
    }])),
    extensions: val.extensions
  }]));
}

const union = bindUnionTypeToContext();

function bindUnionTypeToContext() {
  return function union(config) {
    return {
      kind: "union",
      graphQLType: new GraphQLUnionType({
        name: config.name,
        description: config.description,
        types: config.types.map(x => x.graphQLType),
        resolveType: config.resolveType
      }),
      __rootVal: undefined,
      __context: undefined
    };
  };
} // export type InterfaceType<
function bindTypesToContext() {
  return { ...typesThatDoNotUseContext,
    object: bindObjectTypeToContext(),
    union: bindUnionTypeToContext(),
    field: bindFieldToContext()
  };
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Boolean: Boolean,
  Float: Float,
  ID: ID,
  String: String,
  Int: Int,
  arg: arg,
  enumValues: enumValues,
  'enum': enumType,
  inputObject: inputObject,
  list: list,
  nonNull: nonNull,
  scalar: scalar,
  field: field,
  object: object,
  union: union
});

export { bindTypesToContext, index as types };
