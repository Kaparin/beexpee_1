"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePanic = void 0;
const chalk_1 = __importDefault(require("chalk"));
const sdk_1 = require("@prisma/sdk");
const prompts_1 = __importDefault(require("prompts"));
const getGithubIssueUrl_1 = require("./getGithubIssueUrl");
async function handlePanic(error, cliVersion, binaryVersion, command) {
    var _a;
    if (sdk_1.isCi() && Boolean((_a = prompts_1.default._injected) === null || _a === void 0 ? void 0 : _a.length) === false) {
        throw error;
    }
    await panicDialog(error, cliVersion, binaryVersion, command);
}
exports.handlePanic = handlePanic;
async function panicDialog(error, cliVersion, binaryVersion, command) {
    const errorMessage = error.message
        .split('\n')
        .slice(0, Math.max(20, process.stdout.rows))
        .join('\n');
    console.log(`${chalk_1.default.red('Oops, an unexpected error occured!')}
${chalk_1.default.red(errorMessage)}

${chalk_1.default.bold('Please help us improve Prisma by submitting an error report.')}
${chalk_1.default.bold('Error reports never contain personal or other sensitive information.')}
${chalk_1.default.dim(`Learn more: ${sdk_1.link('https://pris.ly/d/telemetry')}`)}
`);
    const response = await prompts_1.default({
        type: 'select',
        name: 'value',
        message: 'Submit error report',
        initial: 0,
        choices: [
            {
                title: 'Yes',
                value: true,
                description: `Send error report once`,
            },
            {
                title: 'No',
                value: false,
                description: `Don't send error report`,
            },
        ],
    });
    const reportFailedMessage = `${chalk_1.default.bold.red('Oops. We could not send the error report.')}`;
    if (response.value) {
        let reportId;
        try {
            console.log('Submitting...');
            reportId = await sdk_1.sendPanic(error, cliVersion, binaryVersion);
        }
        catch (error) {
            console.log(reportFailedMessage);
        }
        if (reportId) {
            console.log(`\n${chalk_1.default.bold(`We successfully received the error report id: ${reportId}`)}`);
            console.log(`\n${chalk_1.default.bold('Thanks a lot for your help! üôè')}`);
        }
    }
    await getGithubIssueUrl_1.wouldYouLikeToCreateANewIssue({
        prompt: !response.value,
        error,
        cliVersion,
        binaryVersion,
        command,
    });
}
//# sourceMappingURL=handlePanic.js.map