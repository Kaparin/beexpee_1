"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbNeedsForceError = exports.MigrateDevEnvNonInteractiveError = exports.MigrateResetEnvNonInteractiveError = exports.MigrateNeedsForceError = exports.DbPushIgnoreWarningsWithFlagError = exports.DbPushForceFlagRenamedError = exports.HowToBaselineError = exports.OldMigrateDetectedError = exports.NoSchemaFoundError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const sdk_1 = require("@prisma/sdk");
class NoSchemaFoundError extends Error {
    constructor() {
        super(`Could not find a ${chalk_1.default.bold('schema.prisma')} file that is required for this command.\nYou can either provide it with ${chalk_1.default.greenBright('--schema')}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright('./prisma/schema.prisma')} ${sdk_1.link('https://pris.ly/d/prisma-schema-location')}`);
    }
}
exports.NoSchemaFoundError = NoSchemaFoundError;
class OldMigrateDetectedError extends Error {
    constructor() {
        super(`The migrations folder contains migration files from an older version of Prisma Migrate which is not compatible.

Read more about how to upgrade to the new version of Migrate:
${sdk_1.link('https://pris.ly/d/migrate-upgrade')}`);
    }
}
exports.OldMigrateDetectedError = OldMigrateDetectedError;
class HowToBaselineError extends Error {
    constructor() {
        super(`Read more about how to baseline an existing production database:
${sdk_1.link('https://pris.ly/d/migrate-baseline')}`);
    }
}
exports.HowToBaselineError = HowToBaselineError;
class DbPushForceFlagRenamedError extends Error {
    constructor() {
        super(`The --force flag was renamed to --accept-data-loss in 2.17.0, use ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor('prisma db push --preview-feature --accept-data-loss'))}`);
    }
}
exports.DbPushForceFlagRenamedError = DbPushForceFlagRenamedError;
class DbPushIgnoreWarningsWithFlagError extends Error {
    constructor() {
        super(`Use the --accept-data-loss flag to ignore the data loss warnings like ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor('prisma db push --preview-feature --accept-data-loss'))}`);
    }
}
exports.DbPushIgnoreWarningsWithFlagError = DbPushIgnoreWarningsWithFlagError;
class MigrateNeedsForceError extends Error {
    constructor(subcommand) {
        super(`Use the --force flag to use the ${subcommand} command in an unnattended environment like ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor(`prisma migrate ${subcommand} --force`))}`);
    }
}
exports.MigrateNeedsForceError = MigrateNeedsForceError;
class MigrateResetEnvNonInteractiveError extends Error {
    constructor() {
        super(`Prisma Migrate has detected that the environment is non-interactive. It is recommended to run this command in an interactive environment.

Use ${chalk_1.default.bold.greenBright(`--force`)} to run this command without user interaction.
See ${sdk_1.link('https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-reset')}`);
    }
}
exports.MigrateResetEnvNonInteractiveError = MigrateResetEnvNonInteractiveError;
class MigrateDevEnvNonInteractiveError extends Error {
    constructor() {
        super(`Prisma Migrate has detected that the environment is non-interactive, which is not supported.

\`prisma migrate dev\` is an interactive command designed to create new migrations and evolve the database in development.
To apply existing migrations in deployments, use ${chalk_1.default.bold.greenBright(`prisma migrate deploy`)}.
See ${sdk_1.link('https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-deploy')}`);
    }
}
exports.MigrateDevEnvNonInteractiveError = MigrateDevEnvNonInteractiveError;
class DbNeedsForceError extends Error {
    constructor(subcommand) {
        super(`Use the --force flag to use the ${subcommand} command in an unnattended environment like ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor(`prisma db ${subcommand} --force --preview-feature`))}`);
    }
}
exports.DbNeedsForceError = DbNeedsForceError;
//# sourceMappingURL=errors.js.map