"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tearDownMysql = exports.setupMysql = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const sdk_1 = require("@prisma/sdk");
const mariadb_1 = __importDefault(require("mariadb"));
async function setupMysql(options) {
    const { connectionString } = options;
    const { dirname } = options;
    const schema = fs_1.default.readFileSync(path_1.default.join(dirname, 'setup.sql'), 'utf-8');
    await sdk_1.createDatabase(connectionString).catch((e) => console.error(e));
    const credentials = sdk_1.uriToCredentials(connectionString);
    const db = await mariadb_1.default.createConnection({
        host: credentials.host,
        port: credentials.port,
        database: credentials.database,
        user: credentials.user,
        password: credentials.password,
        multipleStatements: true,
    });
    await db.query(schema);
    await db.end();
}
exports.setupMysql = setupMysql;
async function tearDownMysql(options) {
    const { connectionString } = options;
    const credentials = sdk_1.uriToCredentials(connectionString);
    const credentialsClone = { ...credentials };
    credentialsClone.database = 'tests';
    const db = await mariadb_1.default.createConnection({
        host: credentialsClone.host,
        port: credentialsClone.port,
        database: credentialsClone.database,
        user: credentialsClone.user,
        password: credentialsClone.password,
        multipleStatements: true,
    });
    await db.query(`
    DROP DATABASE IF EXISTS \`${credentials.database}\`;
  `);
    await db.end();
}
exports.tearDownMysql = tearDownMysql;
//# sourceMappingURL=setupMysql.js.map