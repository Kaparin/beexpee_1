"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleWarnings = exports.handleUnexecutableSteps = void 0;
const chalk_1 = __importDefault(require("chalk"));
const prompts_1 = __importDefault(require("prompts"));
const sdk_1 = require("@prisma/sdk");
const errors_1 = require("./errors");
function handleUnexecutableSteps(unexecutableSteps, createOnly = false) {
    if (unexecutableSteps && unexecutableSteps.length > 0) {
        const messages = [];
        messages.push(`${chalk_1.default.bold.red('\n⚠️ We found changes that cannot be executed:\n')}`);
        for (const item of unexecutableSteps) {
            messages.push(`${chalk_1.default(`  • Step ${item.stepIndex} ${item.message}`)}`);
        }
        console.info(); // empty line
        // If create only, allow to continue
        if (createOnly) {
            console.error(`${messages.join('\n')}\n`);
        }
        else {
            throw new Error(`${messages.join('\n')}

You can use ${sdk_1.getCommandWithExecutor('prisma migrate dev --create-only')} to create the migration file, and manually modify it to address the underlying issue(s).
Then run ${sdk_1.getCommandWithExecutor('prisma migrate dev')} to apply it and verify it works.\n`);
        }
    }
}
exports.handleUnexecutableSteps = handleUnexecutableSteps;
async function handleWarnings(warnings, force = false, createOnly = false) {
    var _a;
    if (warnings && warnings.length > 0) {
        console.log(chalk_1.default.bold(`\n⚠️  Warnings:\n`));
        for (const warning of warnings) {
            console.log(chalk_1.default(`  • ${warning.message}`));
        }
        console.info(); // empty line
        if (!force) {
            // We use prompts.inject() for testing in our CI
            if (sdk_1.isCi() && Boolean((_a = prompts_1.default._injected) === null || _a === void 0 ? void 0 : _a.length) === false) {
                throw new errors_1.MigrateDevEnvNonInteractiveError();
            }
            else {
                const message = createOnly
                    ? 'Are you sure you want create this migration?'
                    : 'Are you sure you want create and apply this migration?';
                const confirmation = await prompts_1.default({
                    type: 'confirm',
                    name: 'value',
                    message: `${message} ${chalk_1.default.red('Some data will be lost')}.`,
                });
                if (!confirmation.value) {
                    return true;
                }
            }
        }
        return false;
    }
}
exports.handleWarnings = handleWarnings;
//# sourceMappingURL=handleEvaluateDataloss.js.map