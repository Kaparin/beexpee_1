#!/usr/bin/env ts-node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
process.env.NODE_NO_WARNINGS = '1';
process.on('uncaughtException', (e) => {
    console.log(e);
});
process.on('unhandledRejection', (e, promise) => {
    console.log(String(e), String(promise));
});
const sdk_1 = require("@prisma/sdk");
const commandArray = process.argv.slice(2);
// Parse CLI arguments
const args = sdk_1.arg(commandArray, {
    '--schema': String,
    '--telemetry-information': String,
}, false, true);
//
// Read .env file only if next to schema.prisma
//
// if the CLI is called without any command like `dev` we can ignore .env loading
if (process.argv.length > 2) {
    try {
        const envPaths = sdk_1.getEnvPaths(args['--schema']);
        const envData = sdk_1.tryLoadEnvs(envPaths, { conflictCheck: 'error' });
        envData && envData.message && console.log(envData.message);
    }
    catch (e) {
        console.log(e);
    }
}
/**
 * Dependencies
 */
const chalk_1 = __importDefault(require("chalk"));
const debug_1 = __importDefault(require("@prisma/debug"));
const MigrateCommand_1 = require("./commands/MigrateCommand");
const MigrateDev_1 = require("./commands/MigrateDev");
const MigrateReset_1 = require("./commands/MigrateReset");
const MigrateDeploy_1 = require("./commands/MigrateDeploy");
const MigrateResolve_1 = require("./commands/MigrateResolve");
const MigrateStatus_1 = require("./commands/MigrateStatus");
const DbPush_1 = require("./commands/DbPush");
const DbPull_1 = require("./commands/DbPull");
const DbDrop_1 = require("./commands/DbDrop");
const DbSeed_1 = require("./commands/DbSeed");
const handlePanic_1 = require("./utils/handlePanic");
const engines_version_1 = require("@prisma/engines-version");
const packageJson = eval(`require('../package.json')`); // tslint:disable-line
/**
 * Main function
 */
async function main() {
    // create a new CLI with our subcommands
    const cli = MigrateCommand_1.MigrateCommand.new({
        dev: MigrateDev_1.MigrateDev.new(),
        reset: MigrateReset_1.MigrateReset.new(),
        deploy: MigrateDeploy_1.MigrateDeploy.new(),
        status: MigrateStatus_1.MigrateStatus.new(),
        resolve: MigrateResolve_1.MigrateResolve.new(),
        // for convenient debugging
        pull: DbPull_1.DbPull.new(),
        push: DbPush_1.DbPush.new(),
        drop: DbDrop_1.DbDrop.new(),
        seed: DbSeed_1.DbSeed.new(),
    });
    // parse the arguments
    const result = await cli.parse(commandArray);
    if (result instanceof sdk_1.HelpError) {
        console.error(result);
        return 1;
    }
    else if (sdk_1.isError(result)) {
        console.error(result);
        return 1;
    }
    console.log(result);
    return 0;
}
process.on('SIGINT', () => {
    process.exit(1); // now the "exit" event will fire
});
/**
 * Run our program
 */
main()
    .then((code) => {
    if (code !== 0) {
        process.exit(code);
    }
})
    .catch((error) => {
    if (error.rustStack) {
        handlePanic_1.handlePanic(error, packageJson.version, engines_version_1.enginesVersion, commandArray.join(' '))
            .catch((e) => {
            if (debug_1.default.enabled('migrate')) {
                console.error(chalk_1.default.redBright.bold('Error: ') + e.stack);
            }
            else {
                console.error(chalk_1.default.redBright.bold('Error: ') + e.message);
            }
        })
            .finally(() => {
            process.exit(1);
        });
    }
    else {
        if (debug_1.default.enabled('migrate')) {
            console.error(chalk_1.default.redBright.bold('Error: ') + error.stack);
        }
        else {
            console.error(chalk_1.default.redBright.bold('Error: ') + error.message);
        }
        process.exit(1);
    }
});
//# sourceMappingURL=bin.js.map