"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateCommand = void 0;
const sdk_1 = require("@prisma/sdk");
const chalk_1 = __importDefault(require("chalk"));
const flagErrors_1 = require("../utils/flagErrors");
class MigrateCommand {
    constructor(cmds) {
        this.cmds = cmds;
    }
    static new(cmds) {
        return new MigrateCommand(cmds);
    }
    /* eslint-disable-next-line @typescript-eslint/require-await */
    async parse(argv) {
        const args = sdk_1.arg(argv, {
            '--help': Boolean,
            '-h': '--help',
            '--experimental': Boolean,
            '--preview-feature': Boolean,
            '--early-access-feature': Boolean,
            '--telemetry-information': String,
        });
        if (sdk_1.isError(args)) {
            return this.help(args.message);
        }
        if (args['--experimental']) {
            throw new flagErrors_1.ExperimentalFlagWithNewMigrateError();
        }
        // display help for help flag or no subcommand
        if (args._.length === 0 || args['--help']) {
            return this.help();
        }
        if (['up', 'save', 'down'].includes(args._[0])) {
            throw new Error(`The current command "${args._[0]}" doesn't exist in the new version of Prisma Migrate.
Read more about how to upgrade: ${sdk_1.link('https://pris.ly/d/migrate-upgrade')}`);
        }
        if (args['--preview-feature']) {
            sdk_1.logger.warn(`Prisma Migrate was in Preview and is now Generally Available.
You can now remove the ${chalk_1.default.red('--preview-feature')} flag.`);
        }
        const filteredArgs = args._.filter((item) => item !== '--preview-feature');
        // check if we have that subcommand
        const cmd = this.cmds[filteredArgs[0]];
        if (cmd) {
            return cmd.parse(filteredArgs.slice(1));
        }
        return sdk_1.unknownCommand(MigrateCommand.help, args._[0]);
    }
    help(error) {
        if (error) {
            return new sdk_1.HelpError(`\n${chalk_1.default.bold.red(`!`)} ${error}\n${MigrateCommand.help}`);
        }
        return MigrateCommand.help;
    }
}
exports.MigrateCommand = MigrateCommand;
MigrateCommand.help = sdk_1.format(`
Update the database schema with migrations
  
${chalk_1.default.bold('Usage')}

  ${chalk_1.default.dim('$')} prisma migrate [command] [options]

${chalk_1.default.bold('Commands for development')}

         dev   Create a migration from changes in Prisma schema, apply it to the database
               trigger generators (e.g. Prisma Client)
       reset   Reset your database and apply all migrations, all data will be lost

${chalk_1.default.bold('Commands for production/staging')}

      deploy   Apply pending migrations to the database 
      status   Check the status of your database migrations
     resolve   Resolve issues with database migrations, i.e. baseline, failed migration, hotfix

${chalk_1.default.bold('Options')}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${chalk_1.default.bold('Examples')}

  Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
  ${chalk_1.default.dim('$')} prisma migrate dev

  Reset your database and apply all migrations
  ${chalk_1.default.dim('$')} prisma migrate reset

  Apply pending migrations to the database in production/staging
  ${chalk_1.default.dim('$')} prisma migrate deploy

  Check the status of migrations in the production/staging database
  ${chalk_1.default.dim('$')} prisma migrate status

  Specify a schema
  ${chalk_1.default.dim('$')} prisma migrate status --schema=./schema.prisma

`);
//# sourceMappingURL=MigrateCommand.js.map