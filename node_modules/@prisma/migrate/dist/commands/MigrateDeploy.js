"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateDeploy = void 0;
const sdk_1 = require("@prisma/sdk");
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const Migrate_1 = require("../Migrate");
const ensureDatabaseExists_1 = require("../utils/ensureDatabaseExists");
const flagErrors_1 = require("../utils/flagErrors");
const errors_1 = require("../utils/errors");
const printFiles_1 = require("../utils/printFiles");
const detectOldMigrate_1 = require("../utils/detectOldMigrate");
const printDatasource_1 = require("../utils/printDatasource");
const debug_1 = __importDefault(require("@prisma/debug"));
const debug = debug_1.default('prisma:migrate:deploy');
class MigrateDeploy {
    static new() {
        return new MigrateDeploy();
    }
    async parse(argv) {
        const args = sdk_1.arg(argv, {
            '--help': Boolean,
            '-h': '--help',
            '--experimental': Boolean,
            '--early-access-feature': Boolean,
            '--schema': String,
            '--telemetry-information': String,
        }, false);
        if (sdk_1.isError(args)) {
            return this.help(args.message);
        }
        if (args['--help']) {
            return this.help();
        }
        if (args['--experimental']) {
            throw new flagErrors_1.ExperimentalFlagWithNewMigrateError();
        }
        if (args['--early-access-feature']) {
            throw new flagErrors_1.EarlyAccessFeatureFlagWithNewMigrateError();
        }
        const schemaPath = await sdk_1.getSchemaPath(args['--schema']);
        if (!schemaPath) {
            throw new errors_1.NoSchemaFoundError();
        }
        console.info(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
        await printDatasource_1.printDatasource(schemaPath);
        detectOldMigrate_1.throwUpgradeErrorIfOldMigrate(schemaPath);
        const migrate = new Migrate_1.Migrate(schemaPath);
        // Automatically create the database if it doesn't exist
        const wasDbCreated = await ensureDatabaseExists_1.ensureDatabaseExists('apply', true, schemaPath);
        if (wasDbCreated) {
            console.info(); // empty line
            console.info(wasDbCreated);
        }
        const diagnoseResult = await migrate.diagnoseMigrationHistory({
            optInToShadowDatabase: false,
        });
        debug({ diagnoseResult: JSON.stringify(diagnoseResult, null, 2) });
        const listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
        debug({ listMigrationDirectoriesResult });
        console.info(); // empty line
        if (listMigrationDirectoriesResult.migrations.length > 0) {
            const migrations = listMigrationDirectoriesResult.migrations;
            console.info(`${migrations.length} migration${migrations.length > 1 ? 's' : ''} found in prisma/migrations`);
        }
        else {
            console.info(`No migration found in prisma/migrations`);
        }
        const editedMigrationNames = diagnoseResult.editedMigrationNames;
        if (editedMigrationNames.length > 0) {
            console.info(`${chalk_1.default.yellow('WARNING The following migrations have been modified since they were applied:')}
${editedMigrationNames.join('\n')}`);
        }
        const { appliedMigrationNames: migrationIds, } = await migrate.applyMigrations();
        migrate.stop();
        console.info(); // empty line
        if (migrationIds.length === 0) {
            return chalk_1.default.greenBright(`No pending migrations to apply.`);
        }
        else {
            return `The following migration${migrationIds.length > 1 ? 's' : ''} have been applied:\n\n${chalk_1.default(printFiles_1.printFilesFromMigrationIds('migrations', migrationIds, {
                'migration.sql': '',
            }))}
      
${chalk_1.default.greenBright('All migrations have been successfully applied.')}`;
        }
    }
    help(error) {
        if (error) {
            return new sdk_1.HelpError(`\n${chalk_1.default.bold.red(`!`)} ${error}\n${MigrateDeploy.help}`);
        }
        return MigrateDeploy.help;
    }
}
exports.MigrateDeploy = MigrateDeploy;
MigrateDeploy.help = sdk_1.format(`
Apply pending migrations to update the database schema in production/staging

${chalk_1.default.bold('Usage')}

  ${chalk_1.default.dim('$')} prisma migrate deploy [options]

${chalk_1.default.bold('Options')}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${chalk_1.default.bold('Examples')}

  Deploy your pending migrations to your production/staging database
  ${chalk_1.default.dim('$')} prisma migrate deploy

  Specify a schema
  ${chalk_1.default.dim('$')} prisma migrate deploy --schema=./schema.prisma

`);
//# sourceMappingURL=MigrateDeploy.js.map