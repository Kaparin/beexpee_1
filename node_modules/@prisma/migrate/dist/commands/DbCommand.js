"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbCommand = void 0;
const sdk_1 = require("@prisma/sdk");
const chalk_1 = __importDefault(require("chalk"));
class DbCommand {
    constructor(cmds) {
        this.cmds = cmds;
    }
    static new(cmds) {
        return new DbCommand(cmds);
    }
    /* eslint-disable-next-line @typescript-eslint/require-await */
    async parse(argv) {
        const args = sdk_1.arg(argv, {
            '--help': Boolean,
            '-h': '--help',
            '--preview-feature': Boolean,
            '--telemetry-information': String,
        });
        if (sdk_1.isError(args)) {
            return this.help(args.message);
        }
        // display help for help flag or no subcommand
        if (args._.length === 0 || args['--help']) {
            return this.help();
        }
        // check if we have that subcommand
        const cmd = this.cmds[args._[0]];
        if (cmd) {
            const argsForCmd = args['--preview-feature']
                ? [...args._.slice(1), `--preview-feature`]
                : args._.slice(1);
            return cmd.parse(argsForCmd);
        }
        return sdk_1.unknownCommand(DbCommand.help, args._[0]);
    }
    help(error) {
        if (error) {
            return new sdk_1.HelpError(`\n${chalk_1.default.bold.red(`!`)} ${error}\n${DbCommand.help}`);
        }
        return DbCommand.help;
    }
}
exports.DbCommand = DbCommand;
DbCommand.help = sdk_1.format(`
${process.platform === 'win32' ? '' : chalk_1.default.bold('üèãÔ∏è  ')}Manage your database schema and lifecycle during development.

${chalk_1.default.bold('Usage')}

  ${chalk_1.default.dim('$')} prisma db [command] [options]

${chalk_1.default.bold('Options')}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${chalk_1.default.bold('Commands')}
        pull   Pull the state from the database to the Prisma schema using introspection
        push   Push the state from Prisma schema to the database during prototyping ${chalk_1.default.dim('(preview)')}
        seed   Seed your database ${chalk_1.default.dim('(preview)')} 

${chalk_1.default.bold('Examples')}

  Using prisma db pull
  ${chalk_1.default.dim('$')} prisma db pull

  Using prisma db push
  ${chalk_1.default.dim('$')} prisma db push --preview-feature

  Using prisma db seed
  ${chalk_1.default.dim('$')} prisma db seed --preview-feature
`);
//# sourceMappingURL=DbCommand.js.map