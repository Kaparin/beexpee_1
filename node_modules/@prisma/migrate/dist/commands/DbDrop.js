"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbDrop = void 0;
const sdk_1 = require("@prisma/sdk");
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const prompts_1 = __importDefault(require("prompts"));
const ensureDatabaseExists_1 = require("../utils/ensureDatabaseExists");
const flagErrors_1 = require("../utils/flagErrors");
const errors_1 = require("../utils/errors");
const printDatasource_1 = require("../utils/printDatasource");
class DbDrop {
    static new() {
        return new DbDrop();
    }
    async parse(argv) {
        var _a;
        const args = sdk_1.arg(argv, {
            '--help': Boolean,
            '-h': '--help',
            '--preview-feature': Boolean,
            '--force': Boolean,
            '-f': '--force',
            '--schema': String,
            '--telemetry-information': String,
        });
        if (sdk_1.isError(args)) {
            return this.help(args.message);
        }
        if (args['--help']) {
            return this.help();
        }
        if (!args['--preview-feature']) {
            throw new flagErrors_1.PreviewFlagError();
        }
        const schemaPath = await sdk_1.getSchemaPath(args['--schema']);
        if (!schemaPath) {
            throw new errors_1.NoSchemaFoundError();
        }
        console.info(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
        await printDatasource_1.printDatasource(schemaPath);
        const dbInfo = await ensureDatabaseExists_1.getDbInfo(schemaPath);
        const schemaDir = (await sdk_1.getSchemaDir(schemaPath));
        console.info(); // empty line
        if (!args['--force']) {
            // We use prompts.inject() for testing in our CI
            if (sdk_1.isCi() && Boolean((_a = prompts_1.default._injected) === null || _a === void 0 ? void 0 : _a.length) === false) {
                throw new errors_1.DbNeedsForceError('drop');
            }
            // TODO for mssql
            const confirmation = await prompts_1.default({
                type: 'text',
                name: 'value',
                message: `Enter the ${dbInfo.dbType} ${dbInfo.schemaWord} name "${dbInfo.dbName}" to drop it.\nLocation: "${dbInfo.dbLocation}".\n${chalk_1.default.red('All data will be lost')}.`,
            });
            console.info(); // empty line
            if (!confirmation.value) {
                console.info('Drop cancelled.');
                process.exit(0);
            }
            else if (confirmation.value !== dbInfo.dbName) {
                throw Error(`The ${dbInfo.schemaWord} name entered "${confirmation.value}" doesn't match "${dbInfo.dbName}".`);
            }
        }
        let result = undefined;
        try {
            result = await sdk_1.dropDatabase(dbInfo.url, schemaDir);
        }
        catch (e) {
            let json;
            try {
                json = JSON.parse(e.stdout);
            }
            catch (e) {
                console.error(`Could not parse database drop engine response: ${e.stdout.slice(0, 200)}`);
            }
            if (json.message) {
                throw Error(json.message);
            }
            throw Error(e);
        }
        if (result &&
            result.exitCode === 0 &&
            result.stderr.includes('The database was successfully dropped')) {
            return `${process.platform === 'win32' ? '' : 'ðŸš€  '}The ${dbInfo.dbType} ${dbInfo.schemaWord} "${dbInfo.dbName}" from "${dbInfo.dbLocation}" was successfully dropped.\n`;
        }
        else {
            // We should not arrive here normally
            throw Error(`An error occurred during the drop: ${JSON.stringify(result, undefined, 2)}`);
        }
    }
    help(error) {
        if (error) {
            return new sdk_1.HelpError(`\n${chalk_1.default.bold.red(`!`)} ${error}\n${DbDrop.help}`);
        }
        return DbDrop.help;
    }
}
exports.DbDrop = DbDrop;
DbDrop.help = sdk_1.format(`
${process.platform === 'win32' ? '' : chalk_1.default.bold('ðŸ’£  ')}Drop the database

${chalk_1.default.bold.yellow('WARNING')} ${chalk_1.default.bold(`Prisma db drop is currently in Preview (${sdk_1.link('https://pris.ly/d/preview')}).
There may be bugs and it's not recommended to use it in production environments.`)}
${chalk_1.default.dim('When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.')}

${chalk_1.default.bold('Usage')}

  ${chalk_1.default.dim('$')} prisma db drop [options] --preview-feature

${chalk_1.default.bold('Options')}

   -h, --help   Display this help message
     --schema   Custom path to your Prisma schema
  -f, --force   Skip the confirmation prompt

${chalk_1.default.bold('Examples')}

  Drop the database
  ${chalk_1.default.dim('$')} prisma db drop --preview-feature

  Specify a schema
  ${chalk_1.default.dim('$')} prisma db drop --preview-feature --schema=./schema.prisma

  Use --force to skip the confirmation prompt
  ${chalk_1.default.dim('$')} prisma db drop --preview-feature --force
`);
//# sourceMappingURL=DbDrop.js.map