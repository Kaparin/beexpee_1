"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbSeed = void 0;
const sdk_1 = require("@prisma/sdk");
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const flagErrors_1 = require("../utils/flagErrors");
const errors_1 = require("../utils/errors");
const seed_1 = require("../utils/seed");
class DbSeed {
    static new() {
        return new DbSeed();
    }
    async parse(argv) {
        const args = sdk_1.arg(argv, {
            '--help': Boolean,
            '-h': '--help',
            '--preview-feature': Boolean,
            '--schema': String,
            '--telemetry-information': String,
        }, false);
        if (sdk_1.isError(args)) {
            return this.help(args.message);
        }
        if (args['--help']) {
            return this.help();
        }
        if (!args['--preview-feature']) {
            throw new flagErrors_1.PreviewFlagError();
        }
        const schemaPath = await sdk_1.getSchemaPath(args['--schema']);
        if (!schemaPath) {
            throw new errors_1.NoSchemaFoundError();
        }
        console.log(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
        await seed_1.tryToRunSeed(schemaPath);
        return `\n${process.platform === 'win32' ? '' : 'ðŸŒ±  '}Your database has been seeded.`;
    }
    help(error) {
        if (error) {
            return new sdk_1.HelpError(`\n${chalk_1.default.bold.red(`!`)} ${error}\n${DbSeed.help}`);
        }
        return DbSeed.help;
    }
}
exports.DbSeed = DbSeed;
DbSeed.help = sdk_1.format(`
${process.platform === 'win32' ? '' : chalk_1.default.bold('ðŸ™Œ  ')}Seed your database

${chalk_1.default.bold.yellow('WARNING')} ${chalk_1.default.bold(`Prisma db seed is currently in Preview (${sdk_1.link('https://pris.ly/d/preview')}).
There may be bugs and it's not recommended to use it in production environments.`)}
${chalk_1.default.dim('When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.')}

${chalk_1.default.bold('Usage')}

  ${chalk_1.default.dim('$')} prisma db seed [options] --preview-feature

${chalk_1.default.bold('Options')}

    -h, --help   Display this help message
      --schema   Custom path to your Prisma schema

${chalk_1.default.bold('Examples')}

  Specify a schema
  ${chalk_1.default.dim('$')} prisma db seed --preview-feature --schema=./schema.prisma
`);
//# sourceMappingURL=DbSeed.js.map