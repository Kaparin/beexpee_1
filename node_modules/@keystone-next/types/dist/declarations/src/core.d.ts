/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import type { GqlNames, MaybePromise } from './utils';
import type { KeystoneContext, SessionContext } from './context';
declare type FieldDefaultValueArgs<T> = {
    context: KeystoneContext;
    originalInput?: T;
};
export declare type FieldDefaultValue<T> = T | null | ((args: FieldDefaultValueArgs<T>) => MaybePromise<T | null | undefined>);
export declare type CreateContext = (args: {
    sessionContext?: SessionContext<any>;
    skipAccessControl?: boolean;
    req?: IncomingMessage;
}) => KeystoneContext;
export declare type SessionImplementation = {
    createSessionContext(req: IncomingMessage, res: ServerResponse, createContext: CreateContext): Promise<SessionContext<any>>;
};
export declare type GraphQLResolver = (root: any, args: any, context: KeystoneContext) => any;
export declare type GraphQLSchemaExtension = {
    typeDefs: string;
    resolvers: Record<string, Record<string, GraphQLResolver>>;
};
export declare function getGqlNames({ listKey, itemQueryName: _itemQueryName, listQueryName: _listQueryName, }: {
    listKey: string;
    itemQueryName: string;
    listQueryName: string;
}): GqlNames;
export declare type MigrationAction = 'none-skip-client-generation' | 'none' | 'dev';
export {};
