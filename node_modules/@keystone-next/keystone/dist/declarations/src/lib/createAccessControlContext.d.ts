import { KeystoneContext } from '@keystone-next/types';
declare type ListAccessArgs = {
    listKey: string;
    operation: string;
    session: any;
    originalInput: any;
    gqlName: string;
    itemId: any;
    itemIds: any;
    context: KeystoneContext;
};
declare type FieldAccessArgs = {
    listKey: string;
    operation: string;
    session: any;
    originalInput: any;
    gqlName: string;
    context: KeystoneContext;
    item: any;
    fieldKey: string;
};
export declare const skipAccessControlContext: {
    getListAccessControlForUser: () => boolean;
    getFieldAccessControlForUser: () => boolean;
};
export declare const accessControlContext: {
    getListAccessControlForUser(access: any, listKey: ListAccessArgs['listKey'], originalInput: ListAccessArgs['originalInput'], operation: ListAccessArgs['operation'], { gqlName, itemId, itemIds, context, }: Pick<ListAccessArgs, 'gqlName' | 'itemId' | 'itemIds' | 'context'>): Promise<any>;
    getFieldAccessControlForUser(access: any, listKey: FieldAccessArgs['listKey'], fieldKey: FieldAccessArgs['fieldKey'], originalInput: FieldAccessArgs['originalInput'], item: FieldAccessArgs['item'], operation: FieldAccessArgs['operation'], { gqlName, context }: Pick<FieldAccessArgs, 'gqlName' | 'context'>): Promise<boolean>;
};
export {};
