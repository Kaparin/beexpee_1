import { KeystoneContext } from '@keystone-next/types';
declare const createItem: ({ listKey, item, returnFields, context, }: {
    listKey: string;
    item: Record<string, any>;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any>>;
declare const createItems: ({ listKey, items, pageSize, returnFields, context, }: {
    listKey: string;
    items: Record<string, any>[];
    pageSize?: number | undefined;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any>[]>;
declare const getItem: ({ listKey, itemId, returnFields, context, }: {
    listKey: string;
    itemId: number | string;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any> | null>;
declare const getItems: ({ listKey, where, sortBy, first, skip, pageSize, returnFields, context, }: {
    listKey: string;
    where?: Record<string, any> | undefined;
    sortBy?: string | undefined;
    first?: number | undefined;
    skip?: number | undefined;
    pageSize?: number | undefined;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any>[]>;
declare const updateItem: ({ listKey, item, returnFields, context, }: {
    listKey: string;
    item: Record<string, any>;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any> | null>;
declare const updateItems: ({ listKey, items, pageSize, returnFields, context, }: {
    listKey: string;
    items: Record<string, any>[];
    pageSize?: number | undefined;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any>[]>;
declare const deleteItem: ({ listKey, itemId, returnFields, context, }: {
    listKey: string;
    itemId: number | string;
    returnFields?: string | undefined;
    context: KeystoneContext;
}) => Promise<Record<string, any> | null>;
declare const deleteItems: ({ listKey, items, pageSize, returnFields, context, }: {
    listKey: string;
    pageSize?: number | undefined;
    returnFields?: string | undefined;
    items: Record<string, any>[];
    context: KeystoneContext;
}) => Promise<Record<string, any>[]>;
export { getItem, getItems, createItem, createItems, updateItem, updateItems, deleteItem, deleteItems, };
