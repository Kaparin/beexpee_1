'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const _runChunkedMutation = async ({
  query,
  gqlName,
  pageSize,
  items,
  context
}) => {
  if (pageSize <= 0) pageSize = 1;
  const chunks = items.reduce((accum, item, index) => {
    const chunkIndex = Math.floor(index / pageSize);

    if (!accum[chunkIndex]) {
      accum[chunkIndex] = [];
    }

    accum[chunkIndex].push(item);
    return accum;
  }, []);
  const result = await Promise.all(chunks.map(chunk => context.graphql.run({
    query,
    variables: {
      items: chunk
    }
  })));
  /*
   * The result is of the format: [{createUsers: [{id: '123', name: 'aman'}]}, {createUsers: [{id: '456', name: 'mike'}]}].
   * We need to combine all objects into one array keyed by the `createUsers`, such that, the output is: [{id: '123', name: 'aman'}, {id: '456', name: 'Mike'}]
   */

  return [].concat(...result.map(item => item[gqlName]));
};

const createItem = async ({
  listKey,
  item,
  returnFields = `id`,
  context
}) => {
  const {
    createMutationName,
    createInputName
  } = context.gqlNames(listKey);
  const query = `mutation ($item: ${createInputName}){
    ${createMutationName}(data: $item) { ${returnFields} }
  }`;
  const result = await context.graphql.run({
    query,
    variables: {
      item
    }
  });
  return result[createMutationName];
};

const createItems = async ({
  listKey,
  items,
  pageSize = 500,
  returnFields = `id`,
  context
}) => {
  const {
    createManyMutationName,
    createManyInputName
  } = context.gqlNames(listKey);
  const query = `mutation ($items: [${createManyInputName}]){
    ${createManyMutationName}(data: $items) { ${returnFields} }
  }`;
  return _runChunkedMutation({
    query,
    items,
    pageSize,
    gqlName: createManyMutationName,
    context
  });
};

const getItem = async ({
  listKey,
  itemId,
  returnFields = `id`,
  context
}) => {
  const {
    itemQueryName
  } = context.gqlNames(listKey);
  const query = `query ($id: ID!) { ${itemQueryName}(where: { id: $id }) { ${returnFields} }  }`;
  const result = await context.graphql.run({
    query,
    variables: {
      id: itemId
    }
  });
  return result[itemQueryName];
};

const getItems = async ({
  listKey,
  where = {},
  sortBy,
  first,
  skip,
  pageSize = 500,
  returnFields = `id`,
  context
}) => {
  const {
    listQueryName,
    whereInputName,
    listSortName
  } = context.gqlNames(listKey);
  let query;

  if (sortBy) {
    query = `query ($first: Int!, $skip: Int!, $sortBy: [${listSortName}!], $where: ${whereInputName}) { ${listQueryName}(first: $first, skip: $skip, sortBy: $sortBy, where: $where) { ${returnFields} }  }`;
  } else {
    query = `query ($first: Int!, $skip: Int!, $where: ${whereInputName}) { ${listQueryName}(first: $first, skip: $skip, where: $where) { ${returnFields} }  }`;
  }

  let latestResult;

  let _skip = skip || 0;

  let _first = pageSize;
  const allItems = [];

  do {
    // Making sure we are not over fetching
    if (first && allItems.length + _first > first) {
      _first = first - allItems.length;
    }

    const response = await context.graphql.run({
      query,
      variables: {
        first: _first,
        skip: _skip,
        sortBy,
        where
      }
    });
    latestResult = response[Object.keys(response || {})[0]];
    allItems.push(...latestResult);
    _skip += pageSize;
  } while (latestResult.length === _first && (first === undefined || allItems.length < first));

  return allItems;
};

const updateItem = async ({
  listKey,
  item,
  returnFields = `id`,
  context
}) => {
  const {
    updateMutationName,
    updateInputName
  } = context.gqlNames(listKey);
  const query = `mutation ($id: ID!, $data: ${updateInputName}){
    ${updateMutationName}(id: $id, data: $data) { ${returnFields} }
  }`;
  const result = await context.graphql.run({
    query,
    variables: {
      id: item.id,
      data: item.data
    }
  });
  return result[updateMutationName];
};

const updateItems = async ({
  listKey,
  items,
  pageSize = 500,
  returnFields = `id`,
  context
}) => {
  const {
    updateManyMutationName,
    updateManyInputName
  } = context.gqlNames(listKey);
  const query = `mutation ($items: [${updateManyInputName}]){
    ${updateManyMutationName}(data: $items) { ${returnFields} }
  }`;
  return _runChunkedMutation({
    query,
    items,
    pageSize,
    gqlName: updateManyMutationName,
    context
  });
};

const deleteItem = async ({
  listKey,
  itemId,
  returnFields = `id`,
  context
}) => {
  const {
    deleteMutationName
  } = context.gqlNames(listKey);
  const query = `mutation ($id: ID!){
    ${deleteMutationName}(id: $id) { ${returnFields} }
  }`;
  const result = await context.graphql.run({
    query,
    variables: {
      id: itemId
    }
  });
  return result[deleteMutationName];
};

const deleteItems = async ({
  listKey,
  items,
  pageSize = 500,
  returnFields = `id`,
  context
}) => {
  const {
    deleteManyMutationName
  } = context.gqlNames(listKey);
  const query = `mutation ($items: [ID!]){
    ${deleteManyMutationName}(ids: $items) {
      ${returnFields}
    }
  }`;
  return _runChunkedMutation({
    query,
    items,
    pageSize,
    gqlName: deleteManyMutationName,
    context
  });
};

exports.createItem = createItem;
exports.createItems = createItems;
exports.deleteItem = deleteItem;
exports.deleteItems = deleteItems;
exports.getItem = getItem;
exports.getItems = getItems;
exports.updateItem = updateItem;
exports.updateItems = updateItems;
