'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var pLazy = require('p-lazy');
var pReflect = require('p-reflect');
var semver = require('semver');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var pLazy__default = /*#__PURE__*/_interopDefault(pLazy);
var pReflect__default = /*#__PURE__*/_interopDefault(pReflect);
var semver__default = /*#__PURE__*/_interopDefault(semver);

const noop = x => x;
const identity = noop;
const getType = thing => Object.prototype.toString.call(thing).replace(/\[object (.*)\]/, '$1');
const escapeRegExp = str => (str || '').replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'); // { key: value, ... } => { key: mapFn(value, key), ... }

const mapKeys = (obj, func) => Object.entries(obj).reduce((acc, [key, value]) => _objectSpread(_objectSpread({}, acc), {}, {
  [key]: func(value, key, obj)
}), {}); // { key: value, ... } => { mapFn(key, value): value, ... }

const mapKeyNames = (obj, func) => Object.entries(obj).reduce((acc, [key, value]) => _objectSpread(_objectSpread({}, acc), {}, {
  [func(key, value, obj)]: value
}), {});
const resolveAllKeys = async obj => {
  const returnValue = {};
  const errors = {};
  const allPromises = Object.keys(obj).map(key => pReflect__default['default'](obj[key]).then(val => {
    if (val.isFulfilled) {
      returnValue[key] = val.value;
    } else if (val.isRejected) {
      errors[key] = val.reason;
    }

    return val;
  }));
  const results = await Promise.all(allPromises); // If there are any errors, we want to surface them in the same shape as the
  // input object

  if (Object.keys(errors).length) {
    const firstReason = results.find(({
      isRejected
    }) => isRejected);
    const firstError = firstReason.reason; // Use the first error as the message so it's at least meaningful

    const error = new Error(firstError.message || firstError.toString());
    error.errors = errors;
    throw error;
  }

  return returnValue;
};
const unique = arr => [...new Set(arr)];
const intersection = (array1, array2) => unique(array1.filter(value => array2.includes(value)));
const pick = (obj, keys) => keys.reduce((acc, key) => key in obj ? _objectSpread(_objectSpread({}, acc), {}, {
  [key]: obj[key]
}) : acc, {});
const omitBy = (obj, func) => pick(obj, Object.keys(obj).filter(key => !func(key)));
const omit = (obj, keys) => omitBy(obj, value => keys.includes(value)); // [{ k1: v1, k2: v2, ...}, { k3: v3, k4: v4, ...}, ...] => { k1: v1, k2: v2, k3: v3, k4, v4, ... }
// Gives priority to the objects which appear later in the list
// See: https://fettblog.eu/typescript-union-to-intersection/

const objMerge = objs => objs.reduce((acc, obj) => _objectSpread(_objectSpread({}, acc), obj), {}); // [x, y, z] => { x: val, y: val, z: val}

const defaultObj = (keys, val) => keys.reduce((acc, key) => _objectSpread(_objectSpread({}, acc), {}, {
  [key]: val
}), {});
const filterValues = (obj, predicate) => Object.entries(obj).reduce((acc, [key, value]) => predicate(value) ? _objectSpread(_objectSpread({}, acc), {}, {
  [key]: value
}) : acc, {});
/**
 * Given an array of objects, returns a single new object keyed by a given property of each input object
 * and transformed by a given function.
 *
 * @example [x, y, z] => { x[keyedBy]: mapFn(x), ... }
 * @example
 * arrayToObject([
 *  { name: 'a', animal: 'cat' },
 *  { name: 'b', animal: 'dog' },
 *  { name: 'c', animal: 'cat' },
 *  { name: 'd', animal: 'dog' }
 * ], 'name', o => o.animal);
 *
 * // Would give
 * {
 *   a: 'cat',
 *   b: 'dog',
 *   c: 'cat',
 *   d: 'dog'
 * }
 *
 * @param {Object} objs An array of objects. These should have the same properties.
 * @param {String} keyedBy The property on the input objects to key the result.
 * @param {Function} mapFn A function returning the output object values. Takes each full input object.
 */

const arrayToObject = (objs, keyedBy, mapFn = i => i) => objs.reduce((acc, obj) => _objectSpread(_objectSpread({}, acc), {}, {
  [obj[keyedBy]]: mapFn(obj)
}), {});
/**
 * Concatenates child arrays one level deep.
 * @example flatten([[1, 2, 3], [4, 5], 6, [[7, 8], [9, 10]]]) => [1, 2, 3, 4, 5, 6, [7, 8], [9, 10]]
 * @param {Array} arr An array of one or more arrays
 * @returns The new array.
 */

const flatten = arr => Array.prototype.concat(...arr); // { foo: [1, 2, 3], bar: [4, 5, 6]} => [{ foo: 1, bar: 4}, { foo: 2, bar: 5}, { foo: 3, bar: 6 }]

const zipObj = obj => Object.values(obj)[0].map((_, i) => Object.keys(obj).reduce((acc, k) => _objectSpread(_objectSpread({}, acc), {}, {
  [k]: obj[k][i]
}), {}));
const mergeWhereClause = (queryArgs, whereClauseToMergeIn) => {
  if (getType(whereClauseToMergeIn) !== 'Object' || Object.keys(whereClauseToMergeIn).length === 0) {
    return queryArgs;
  }

  const mergedQueryArgs = queryArgs.where && Object.keys(queryArgs.where).length > 0 ? {
    AND: [queryArgs.where, whereClauseToMergeIn]
  } : whereClauseToMergeIn;
  return _objectSpread(_objectSpread({}, queryArgs), {}, {
    where: mergedQueryArgs
  });
};
const createLazyDeferred = () => {
  let state;
  let resolvedWith;
  let rejectedWith;
  let resolveCallback;
  let rejectCallback;
  const promise = new pLazy__default['default']((resolve, reject) => {
    if (state === 'resolved') {
      resolve(resolvedWith);
    } else if (state === 'rejected') {
      reject(rejectedWith);
    } else {
      resolveCallback = resolve;
      rejectCallback = reject;
    }
  });
  return {
    promise,
    resolve: val => {
      if (resolveCallback) {
        resolveCallback(val);
      } else {
        resolvedWith = val;
        state = 'resolved';
      }
    },
    reject: error => {
      if (rejectCallback) {
        rejectCallback(error);
      } else {
        rejectedWith = error;
        state = 'rejected';
      }
    }
  };
};
/**
 * Compares two version strings or number arrays in the major.minor.patch format.
 * @param {Array<Number>|String} comp The version to compare.
 * @param {Array<Number>|String} base The version against which to compare.
 * @returns True if each element of comp is greater than or equal base.
 */

const versionGreaterOrEqualTo = (comp, base) => {
  const parseVersion = input => {
    if (input instanceof Array) {
      return semver__default['default'].coerce(input.join('.'));
    }

    return semver__default['default'].coerce(input);
  };

  const v1 = parseVersion(comp);
  const v2 = parseVersion(base);
  if (v1 === null) return false;
  if (v2 === null) return true;
  return semver__default['default'].gte(v1, v2);
};
/**
 * Converts the first character of a string to uppercase.
 * @param {String} str The string to convert.
 * @returns The new string
 */

const upcase = str => str.substr(0, 1).toUpperCase() + str.substr(1);

exports.arrayToObject = arrayToObject;
exports.createLazyDeferred = createLazyDeferred;
exports.defaultObj = defaultObj;
exports.escapeRegExp = escapeRegExp;
exports.filterValues = filterValues;
exports.flatten = flatten;
exports.getType = getType;
exports.identity = identity;
exports.intersection = intersection;
exports.mapKeyNames = mapKeyNames;
exports.mapKeys = mapKeys;
exports.mergeWhereClause = mergeWhereClause;
exports.noop = noop;
exports.objMerge = objMerge;
exports.omit = omit;
exports.omitBy = omitBy;
exports.pick = pick;
exports.resolveAllKeys = resolveAllKeys;
exports.unique = unique;
exports.upcase = upcase;
exports.versionGreaterOrEqualTo = versionGreaterOrEqualTo;
exports.zipObj = zipObj;
