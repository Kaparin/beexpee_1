'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fieldsLegacy = require('@keystone-next/fields-legacy');
var path = require('path');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var fieldsMongoidLegacy = require('@keystone-next/fields-mongoid-legacy');
var fieldsAutoIncrementLegacy = require('@keystone-next/fields-auto-increment-legacy');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefault(path);

const pkgDir = path__default['default'].dirname(require.resolve('@keystone-next/fields/package.json'));
const resolveView = pathname => path__default['default'].join(pkgDir, 'types', pathname);

// @ts-ignore
const checkbox = (config = {}) => ({
  type: fieldsLegacy.Checkbox,
  config,
  views: resolveView('checkbox/views')
});

const relationship = config => ({
  type: fieldsLegacy.Relationship,
  config,
  views: resolveView('relationship/views'),
  getAdminMeta: (listKey, path, adminMetaRoot) => {
    var _config$many, _config$ui$hideCreate, _config$ui, _config$ui2, _config$ui$linkToItem, _config$ui$removeMode, _config$ui$inlineCrea, _config$ui$inlineEdit, _config$ui$inlineConn;

    const refListKey = config.ref.split('.')[0];

    if (!adminMetaRoot.listsByKey[refListKey]) {
      throw new Error(`The ref [${config.ref}] on relationship [${listKey}.${path}] is invalid`);
    }

    return _objectSpread({
      refListKey,
      many: (_config$many = config.many) !== null && _config$many !== void 0 ? _config$many : false,
      hideCreate: (_config$ui$hideCreate = (_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.hideCreate) !== null && _config$ui$hideCreate !== void 0 ? _config$ui$hideCreate : false
    }, ((_config$ui2 = config.ui) === null || _config$ui2 === void 0 ? void 0 : _config$ui2.displayMode) === 'cards' ? {
      displayMode: 'cards',
      cardFields: config.ui.cardFields,
      linkToItem: (_config$ui$linkToItem = config.ui.linkToItem) !== null && _config$ui$linkToItem !== void 0 ? _config$ui$linkToItem : false,
      removeMode: (_config$ui$removeMode = config.ui.removeMode) !== null && _config$ui$removeMode !== void 0 ? _config$ui$removeMode : 'disconnect',
      inlineCreate: (_config$ui$inlineCrea = config.ui.inlineCreate) !== null && _config$ui$inlineCrea !== void 0 ? _config$ui$inlineCrea : null,
      inlineEdit: (_config$ui$inlineEdit = config.ui.inlineEdit) !== null && _config$ui$inlineEdit !== void 0 ? _config$ui$inlineEdit : null,
      inlineConnect: (_config$ui$inlineConn = config.ui.inlineConnect) !== null && _config$ui$inlineConn !== void 0 ? _config$ui$inlineConn : false
    } : {
      displayMode: 'select',
      refLabelField: adminMetaRoot.listsByKey[refListKey].labelField
    });
  }
});

// @ts-ignore
const text = (config = {}) => ({
  type: fieldsLegacy.Text,
  config,
  views: resolveView('text/views'),
  getAdminMeta: () => {
    var _config$ui$displayMod, _config$ui;

    return {
      displayMode: (_config$ui$displayMod = (_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.displayMode) !== null && _config$ui$displayMod !== void 0 ? _config$ui$displayMod : 'input'
    };
  }
});

// @ts-ignore
const password = (config = {}) => ({
  type: fieldsLegacy.Password,
  config,
  views: resolveView('password/views'),
  getAdminMeta: () => ({
    minLength: config.minLength !== undefined ? config.minLength : 8
  })
});

// @ts-ignore
const timestamp = (config = {}) => ({
  type: fieldsLegacy.DateTimeUtc,
  config,
  views: resolveView('timestamp/views')
});

// @ts-ignore
const integer = (config = {}) => ({
  type: fieldsLegacy.Integer,
  config,
  views: resolveView('integer/views')
});

// @ts-ignore
const float = (config = {}) => ({
  type: fieldsLegacy.Float,
  config,
  views: resolveView('float/views')
});

// @ts-ignore
const decimal = (config = {}) => ({
  type: fieldsLegacy.Decimal,
  config,
  views: resolveView('decimal/views'),
  getAdminMeta: () => ({
    precision: config.precision || null,
    scale: config.scale || null
  })
});

// @ts-ignore
const mongoId = (config = {}) => ({
  type: fieldsMongoidLegacy.MongoId,
  config,
  views: resolveView('mongoId/views')
});

// @ts-ignore
const autoIncrement = (config = {}) => ({
  type: fieldsAutoIncrementLegacy.AutoIncrement,
  config,
  views: resolveView('integer/views')
});

// @ts-ignore
const select = config => ({
  type: fieldsLegacy.Select,
  config,
  views: resolveView('select/views'),
  getAdminMeta: () => {
    var _config$dataType, _config$ui$displayMod, _config$ui;

    return {
      options: config.options,
      dataType: (_config$dataType = config.dataType) !== null && _config$dataType !== void 0 ? _config$dataType : 'string',
      displayMode: (_config$ui$displayMod = (_config$ui = config.ui) === null || _config$ui === void 0 ? void 0 : _config$ui.displayMode) !== null && _config$ui$displayMod !== void 0 ? _config$ui$displayMod : 'select'
    };
  }
});

// @ts-ignore
const virtual = config => ({
  type: fieldsLegacy.Virtual,
  config,
  views: resolveView('virtual/views'),
  getAdminMeta: () => {
    var _config$graphQLReturn;

    return {
      graphQLReturnFragment: (_config$graphQLReturn = config.graphQLReturnFragment) !== null && _config$graphQLReturn !== void 0 ? _config$graphQLReturn : ''
    };
  }
});

exports.autoIncrement = autoIncrement;
exports.checkbox = checkbox;
exports.decimal = decimal;
exports.float = float;
exports.integer = integer;
exports.mongoId = mongoId;
exports.password = password;
exports.relationship = relationship;
exports.select = select;
exports.text = text;
exports.timestamp = timestamp;
exports.virtual = virtual;
